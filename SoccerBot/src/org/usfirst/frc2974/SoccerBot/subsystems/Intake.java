// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2974.SoccerBot.subsystems;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import org.usfirst.frc2974.SoccerBot.RobotMap;

/**
 * Uses a potentiometer to standardize the intakes's position
 */
public class Intake extends AbstractIntake {

	// enumerates the two cases used later; up, and fall
	private final double transitionUpHigh = 150;
	private final double transitionLowFlat = 66;
	private final AnalogPotentiometer angleSensor = RobotMap.intakeAngleSensor;
	private double transitionHighDribble = 122;
	private double transitionDribbleLow = 93;

	/**
	 * Locates the arm based off of the ranges set in class.
	 *
	 * @return the current ArmPosition.
	 */
	public ArmPosition getArmPosition() {
		double position = angleSensor.get();
		if (position > transitionUpHigh) {
			return ArmPosition.up;
		}
		if (position > transitionHighDribble) {
			return ArmPosition.high;
		}
		if (position > transitionDribbleLow) {
			return ArmPosition.dribble;
		}
		if (position > transitionLowFlat) {
			return ArmPosition.low;
		}
		return ArmPosition.flat;
	}

	// unused
	public void setDribbleMode() {
		transitionHighDribble = 660;
		transitionDribbleLow = 620;
	}

	// unused
	public void setLoadMOde() {
		transitionHighDribble = 700;
		transitionDribbleLow = 660;
	}
}
