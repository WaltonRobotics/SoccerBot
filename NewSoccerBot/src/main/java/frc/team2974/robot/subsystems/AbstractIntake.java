// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.team2974.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.team2974.robot.RobotMap;
import frc.team2974.robot.commands.IntakeFlat;
import frc.team2974.robot.commands.IntakeManual;


/**
 * Abstract class for use with Intake or IntakeNoPotentiometer
 */
public abstract class AbstractIntake extends Subsystem {

  private final Solenoid extend = RobotMap.intakeArmExtend;
  private final TalonSRX armTalon = RobotMap.intakeArmTalon;
  private final Solenoid retract = RobotMap.intakeArmRetract;
  //protected IntakeFlat flatCommand = new IntakeFlat();
  private ArmMovement action;

  public final void updateSmartDashboard() {
    SmartDashboard.putString("arm movement", action.toString());
    SmartDashboard.putString("Arm position", getArmPosition().toString());
  }

  public final void initDefaultCommand() {
    setDefaultCommand(new IntakeManual());
  }

  public static final void startFlat() {
    new IntakeFlat().start();
  }

  public static final void endFlat() {
    new IntakeManual().start();
  }

  //sets solenoid values to true/false depending on case
  public void setArmMovement(ArmMovement move) {
    switch (move) {
      case fall:
        extend.set(true);
        retract.set(false);
        break;
      case up:
        extend.set(false);
        retract.set(true);
        break;
      case block:
        extend.set(false);
        retract.set(false);
        break;
    }
    action = move;
  }

  public final ArmMovement getAction() {
    return action;
  }

  /**
   * sets speed of motor on intake arm
   *
   * @param speed da speed
   */
  public final void setMotorPower(double speed) {
    armTalon.set(ControlMode.PercentOutput, speed);
  }

  public abstract ArmPosition getArmPosition();

  //enumerates the two cases used later; up, and fall
  public enum ArmMovement {
    up, fall, block
  }

  public enum ArmPosition {
    up, high, dribble, low, flat
  }
}

