// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.team2974.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.team2974.robot.subsystems.AbstractIntake;
import frc.team2974.robot.subsystems.DriveTrain;
import frc.team2974.robot.subsystems.Inputs;
import frc.team2974.robot.subsystems.Intake;
import frc.team2974.robot.subsystems.Kicker;

public class Robot extends IterativeRobot {

  public static final OI oi = new OI();
  public static final DriveTrain driveTrain = new DriveTrain();
  public static final AbstractIntake intake = new Intake();
  public static final Inputs inputs = new Inputs();
  public static final Kicker kicker = new Kicker();
  CameraServer server;

  /**
   * This function is run when the robot is first started up and should be used for any initialization code.
   */
  public final void robotInit() {
    RobotMap.init();

    // OI must be constructed after subsystems. If the OI creates Commands
    // (which it very likely will), subsystems are not guaranteed to be
    // constructed yet. Thus, their requires() statements may grab null
    // pointers. Bad news. Don't move it.

    //code to make camera work
//		server = CameraServer.getInstance();
//        server.setQuality(50);
//        server.startAutomaticCapture("cam0");
  }

  /**
   * This function is called when the disabled button is hit. You can use it to reset subsystems before shutting down.
   */
  public void disabledInit() {

  }

  public final void disabledPeriodic() {
    Scheduler.getInstance().run();
    inputs.updateSmartDashboard();
    SmartDashboard.putNumber("Angle sensor", RobotMap.intakeAngleSensor.get());
  }

  public void autonomousInit() {
    // this robot should never be in autonomous lol
  }

  /**
   * This function is called periodically during autonomous
   */
  public final void autonomousPeriodic() {
    Scheduler.getInstance().run();
  }

  public final void teleopInit() {
    SmartDashboard.putString("current intake command", intake.getCurrentCommand().toString());
    //SmartDashboard.putData("Enable Charging", NewKickSequence.enableCharging());
  }

  /**
   * This function is called periodically during operator control
   */
  public final void teleopPeriodic() {
    Scheduler.getInstance().run();
    intake.updateSmartDashboard();
    SmartDashboard.putNumber("Angle sensor", RobotMap.intakeAngleSensor.get());
  }

  /**
   * This function is called periodically during test mode
   */
  public final void testPeriodic() {
//    LiveWindow.run();
  }
}
